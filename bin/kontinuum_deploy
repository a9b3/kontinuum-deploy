#!/usr/bin/env node

const compile = require('hbs-templater').compile
const argv = require('yargs').argv
const path = require('path')
const Promise = require('bluebird')
const exec = require('child_process').exec
const execSync = require('child_process').execSync

const KONTINUUM_URL = `http://kontinuum.samlau-staging.us/deploy`

function commandExists(command) {
  try {
    execSync(`type ${command} >/dev/null 2>&1 || { exit 1; }`)
    return true
  } catch (e) {
    return false
  }
}

function checkRequiredArgs(argv) {
  const requiredCommands = [
    'docker',
    'git',
  ]
  const hasAllRequiredCommands = requiredCommands.every(command => {
    if (!commandExists(command)) {
      console.log(`Required ${command} to be installed`)
      return false
    }
    return true
  })
  if (!hasAllRequiredCommands) {
    return false
  }

  if (!argv.input) {
    console.log(`Required --input`)
    return false
  }
  if (!argv.output) {
    console.log(`Required --output`)
    return false
  }
  if (!argv.params) {
    console.log(`Required --params`)
    return false
  }
  if (
    !process.env.DOCKER_EMAIL
    || !process.env.DOCKER_PASS
    || !process.env.DOCKER_USER
    || !process.env.SERVICE
    || !process.env.KONTINUUM_TOKEN
  ) {
    console.log(`Required ENV var missing DOCKER_EMAIL, DOCKER_PASS, DOCKER_USER, SERVICE, KONTINUUM_TOKEN`)
    return false
  }

  return true
}

function main() {
  if (!checkRequiredArgs(argv)) return

  const input = argv.input
  const output = argv.output
  const params = argv.params
  const DOCKER_EMAIL = process.env.DOCKER_EMAIL
  const DOCKER_PASS = process.env.DOCKER_PASS
  const DOCKER_USER = process.env.DOCKER_USER
  const SERVICE = process.env.SERVICE
  const KONTINUUM_TOKEN = process.env.KONTINUUM_TOKEN

  const tag = execSync(`git rev-parse --short HEAD`).toString().trim()
  const imageName = `${DOCKER_USER}/${SERVICE}:${tag}`

  const outputPath = path.resolve(output)
  compile({
    params: {
      IMAGE_NAME: imageName,
    },
    input: path.resolve(input),
    output: outputPath,
  })

  execSync(`docker login -e ${DOCKER_EMAIL} -u ${DOCKER_USER} -p ${DOCKER_PASS}`)
  execSync(`docker build -t ${imageName} .`)
  execSync(`docker push ${imageName}`)
  execSync(`curl -i -X POST -H "Content-Type: multipart/form-data" -F "data=@${output}" -H "token=${KONTINUUM_TOKEN}" ${KONTINUUM_URL}`)
}

main()

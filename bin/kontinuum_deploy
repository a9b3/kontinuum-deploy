#!/usr/bin/env node

const compile = require('hbs-templater').compile
const argv = require('yargs').argv
const path = require('path')
const Promise = require('bluebird')
const exec = require('child_process').exec
const execSync = require('child_process').execSync
const chalk = require('chalk')

const KONTINUUM_URL = `http://kontinuum.staging-samlau.us/deploy`

function commandExists(command) {
  try {
    execSync(`type ${command} >/dev/null 2>&1 || { exit 1; }`)
    return true
  } catch (e) {
    return false
  }
}

function checkRequiredArgs(argv) {
  const requiredCommands = [
    'docker',
    'git',
  ]
  const hasAllRequiredCommands = requiredCommands.every(command => {
    if (!commandExists(command)) {
      console.log(`Required ${command} to be installed`)
      return false
    }
    return true
  })
  if (!hasAllRequiredCommands) {
    return false
  }

  const hasAllArgs = [
    'service',
    'input',
    'output',
  ].every(req => {
    if (!argv[req]) {
      console.log(`Required --${req}`)
      return false
    }
    return true
  })
  if (!hasAllArgs) {
    return false
  }

  if (
    !process.env.DOCKER_EMAIL
    || !process.env.DOCKER_PASS
    || !process.env.DOCKER_USER
    || !process.env.KONTINUUM_TOKEN
  ) {
    console.log(`Required ENV var missing DOCKER_EMAIL, DOCKER_PASS, DOCKER_USER, KONTINUUM_TOKEN`)
    return false
  }

  return true
}

function main() {
  if (!checkRequiredArgs(argv)) return

  const input = argv.input
  const output = argv.output
  const service = argv.service
  const dockerFile = argv.dockerFile || '.'
  const DOCKER_EMAIL = process.env.DOCKER_EMAIL
  const DOCKER_PASS = process.env.DOCKER_PASS
  const DOCKER_USER = process.env.DOCKER_USER
  const KONTINUUM_TOKEN = process.env.KONTINUUM_TOKEN

  const tag = execSync(`git rev-parse --short HEAD`).toString().trim()
  const imageName = `${DOCKER_USER}/${service}:${tag}`

  console.log(``)
  console.log(chalk.green(`new tag: ${tag}`))
  console.log(chalk.green(`docker image: ${imageName}`))

  console.log(``)
  console.log(chalk.green(`compiling kubernetes yaml file`))
  const outputPath = path.resolve(output)
  compile({
    params: {
      IMAGE_NAME: imageName,
    },
    input: path.resolve(input),
    output: outputPath,
    overwrite: true,
  })

  console.log(``)
  console.log(chalk.green(`Logging into docker as ${DOCKER_USER}`), '\n')
  execSync(`docker login -e ${DOCKER_EMAIL} -u ${DOCKER_USER} -p ${DOCKER_PASS}`, {
    stdio: [0, 1, 2],
  })
  console.log(``)
  console.log(chalk.green(`Building docker image ${imageName} at ${dockerFile}`), '\n')
  execSync(`docker build -t ${imageName} ${dockerFile}`, {
    stdio: [0, 1, 2],
  })
  console.log(``)
  console.log(chalk.green(`Pushing docker image to docker hub`), '\n')
  execSync(`docker push ${imageName}`, {
    stdio: [0, 1, 2],
  })
  console.log(``)
  console.log(chalk.green(`Pushing to kontinuum server`), '\n')
  execSync(`curl -i -X POST -H "Content-Type: multipart/form-data" -F "data=@${output}" -H "token: ${KONTINUUM_TOKEN}" ${KONTINUUM_URL}`, {
    stdio: [0, 1, 2],
  })
}

main()
